population_count:               # population count (by meta group)
  - 16000  # UG
  - 8000   # GR
  - 3000   # VM/GM/LA
  - 10000  # fac/staff
population_names:               # names of populations (by meta group)
  - "UG"
  - "GR"
  - "PR"
  - "FS"

# @Brian Liu's analysis says:
# 2506 students who are infected and recover from 12/22/2021 - 1/25/2022
# 965 arrival positives in the period 1/26/2022 - 2/7/2022 (not including arrival testing)
# In addition we have ~1900 infected during the outbreak
# Arrival testing scenario 1:
#   all students do a pre-departure antigen test with sensitivity 50%,
#   all students again an arrival PCR test with sensitivity 67% and no isolation delay,
#   This would give 2506 + (1-.165) 965 = 3312 immune and .165 * 965 = 160 infectious to start
#   Add 1900 from the Dec Omicron surge to get 5212
# Arrival testing scenario 2:
#   half of students do a pre-departure test with sensitivity 50%,
#   75% of students (independently chosen) do an arrival PCR 67% sensitivity and no test delay
#   then the chance of a positive getting through is (.5 + .5*.5) * (.25 + .75*.33) = 0.37
#   This would give 2506 + (1-.37) 965 = 3114 immune and .37 * 965 = 357 infectious to start
#   Add 1900 immune to get 5014
# The google sheet below works out these numbers, and also the number of people who will need to be isolated from the
#   people infected over break with immunity that are not found in pre-departure testing and from the active infections
#   that are found in arrival testing
#   https://docs.google.com/spreadsheets/d/1bWOtKMsK4dBm47GPHWb3LhiPNuYlXFHvDr-f0BIv7IY/edit?usp=sharing
# For GR and Professional students past infections, we take the UG numbers, take out the 1900 from the Dec Omicron
#   outbreak and divide by 2.  This gives (5011-1900)/2 = 1555. Scaling by population size gives
#   1555 * 8000 / 16000 = 777 for GR and 1555 * 3000 / 16000 =  292 for professional students.
# For UG initial infections, we take the UG active infections, cut by 2, and scale by the population size.  This gives
#   (360 / 2) * 8000 / 16000 = 90 for GR and (360 / 2) * 3000 / 16000 = 34 for professional students.
# For faculty / staff, past_infections we take roughly 15 per day (roughly how many infections we've been seeing),
#   over 40 days to get 600. For active infections, we take 15 per day over 3 days
initial_infections: # realistic scenario 2 above
  - 360  # UG
  - 90    # GR
  - 34    # VM/GM/LA
  - 30    # fac/staff
past_infections: # realistic scenario 2 above
  - 5011  # UG
  - 777   # GR
  - 292   # VM/GM/LA
  - 600    # fac/staff (based on roughly 15 per day over 40 days)
additional_isolations:
  - 2243  # UG (scenario 2 above)
  - 0     # GR
  - 0     # VM/GM/LA
  - 0     # fac/staff

# In the modeling team's spring 2021 projections, based on fall 2020 data, we estimated per-person
# outside infection rates of 1.42E-5 for the greek/athlete population, 7.11E-6 for other UG, and
# 6.45E-6 for graduate students.  During this period, we estimated 1.209 E-4 for faculty and staff.
# This puts the most social student population at about 1/10 of the employee rate per-person.
# Let's use this same rule of thumb for spring 2022, setting the student meta-groups to 1/10 of the
# employee per-person rate. With faculty and staff at 5 per day, this gives:
# - a UG number of 5*(16K/10K)/10 = 0.8
# - a GR number of 5*(8K/10K)/10 = 0.4
# - a PR number of 5*(3K/10K)/10 = 0.15
outside_rates: #number of infections for each meta-group per day across the whole meta-group
  - 0.8
  - 0.4
  - 0.15
  - 5           # @sst76 from observed 175 over 77 days in employees from 9/15 to 12/01, to give 2.27
                # pf98 more recently we've see roughly 15 per day across the entire employee population
                # Cutting this to 5 because by the time the semester starts new cases should be less frequent

# multiplier to apply to transmission once virtual instruction classwork makes students busy
# (after 3 generations / 12 days pass from the start of the simulation --- this is 7 pre-semester days and 5 days
# during virtual instruction )
classwork_transmission_multiplier:
  - 0.85  # UG
  - 1     # GR, we model them as not being affected by classwork
  - 0.85  # VM/GM/LA
  - 1     # fac/staff

# Number of infections per day per (meta-group-specific contact unit).
# This is based on the following analysis:
#   @hwr26: calibration-student.py
#   @sst76: calibration-employee.py
infections_per_day_per_contact_unit:
  - 0.28
  - 0.10
  - 0.10
  - 0.015 # @sst calibration during the Dec 31 meeting gives 0.005.  Increasing this 3x for Omicron.



T: 28                           # num generations (16 weeks with 4-day generations)

symptomatic_rate: .35           # used to compute discovered without surveillance
no_surveillance_test_rate: 0.01 # percent of the population tested in a generation
                                # (under no surveillance)
booster_effectiveness: 0.5      # reduction in transmission from boosters

generation_time: 4              # generation time (days)

# Define the isolation policy in use.
on_campus_frac: 0.5             # fraction of students on campus
isolation_durations:            # durations of isolation (days)
  - 5
  - 10
isolation_fracs:                # fraction of pop falling into various isolation
  - 0.8                         # durations
  - 0.2

# A person is modeled as having constant infectiousness beginning some time
# after exposure and lasting an additional max_infectious_days. It is only during this
# infectious period that the infection is modeled as being detectable in PCR.
max_infectious_days: 6

# Sensitivity of a PCR test during the infectious period. The PCR test is modeled as having 0
# sensitivity in the period between exposure and the start of the infectious period.
pcr_sensitivity: 0.9

# Based on Xiangyu's adjusted moment match code, this is the fraction of the
# population (UG-only?  or all students) broken out by the amount of contact
# that they have, starting from low contact to high contact.
# Assumes that group i has i+1 contacts per day.
json_path: "nominal.json"       # path to JSON with additional params
